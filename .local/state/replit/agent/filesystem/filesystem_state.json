{"file_contents":{"attached_assets/AccountingReports_1756384544194.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\nexport default function AccountingReports() {\n  const [dateRange, setDateRange] = useState({\n    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days ago\n    endDate: new Date().toISOString().split('T')[0], // today\n  });\n  \n  const [reportType, setReportType] = useState(\"monthly\");\n\n  const { data: salesReport, refetch: refetchSales } = useQuery({\n    queryKey: [\"/api/reports/sales\", dateRange.startDate, dateRange.endDate],\n    queryFn: () => api.getSalesReport(dateRange.startDate, dateRange.endDate),\n  });\n\n  const { data: expensesReport, refetch: refetchExpenses } = useQuery({\n    queryKey: [\"/api/reports/expenses\", dateRange.startDate, dateRange.endDate],\n    queryFn: () => api.getExpensesReport(dateRange.startDate, dateRange.endDate),\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: api.getExpenses,\n  });\n\n  const handleDateRangeChange = () => {\n    refetchSales();\n    refetchExpenses();\n  };\n\n  const calculateProfitLoss = () => {\n    const totalRevenue = salesReport?.summary.totalSales || 0;\n    const totalExpenses = expensesReport?.totalExpenses || 0;\n    return totalRevenue - totalExpenses;\n  };\n\n  const getQuickDateRange = (type: string) => {\n    const today = new Date();\n    let startDate: Date;\n    \n    switch (type) {\n      case \"today\":\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        break;\n      case \"week\":\n        startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case \"month\":\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        break;\n      case \"year\":\n        startDate = new Date(today.getFullYear(), 0, 1);\n        break;\n      default:\n        return;\n    }\n    \n    setDateRange({\n      startDate: startDate.toISOString().split('T')[0],\n      endDate: today.toISOString().split('T')[0],\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Date Range Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle>فترة التقرير</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n            <div>\n              <Label htmlFor=\"startDate\">من تاريخ</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"endDate\">إلى تاريخ</Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                onClick={handleDateRangeChange}\n                data-testid=\"button-apply-date-range\"\n              >\n                تطبيق\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"today\")}\n              data-testid=\"button-today\"\n            >\n              اليوم\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"week\")}\n              data-testid=\"button-week\"\n            >\n              هذا الأسبوع\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"month\")}\n              data-testid=\"button-month\"\n            >\n              هذا الشهر\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => getQuickDateRange(\"year\")}\n              data-testid=\"button-year\"\n            >\n              هذا العام\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المبيعات</CardTitle>\n            <i className=\"fas fa-chart-line text-accent\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-total-sales\">\n              {salesReport?.summary.totalSales?.toFixed(2) || \"0.00\"} درهم\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات المتجر</CardTitle>\n            <i className=\"fas fa-store text-primary\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-instore-sales\">\n              {salesReport?.summary.inStoreTotal?.toFixed(2) || \"0.00\"} درهم\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesReport?.summary.inStoreCount || 0} معاملة\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات أونلاين</CardTitle>\n            <i className=\"fas fa-globe text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\" data-testid=\"text-online-sales\">\n              {salesReport?.summary.onlineTotal?.toFixed(2) || \"0.00\"} درهم\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesReport?.summary.onlineCount || 0} معاملة\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المصروفات</CardTitle>\n            <i className=\"fas fa-receipt text-destructive\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-expenses\">\n              {expensesReport?.totalExpenses?.toFixed(2) || \"0.00\"} درهم\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Profit/Loss Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle>الربح والخسارة</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-3xl font-bold\" data-testid=\"text-profit-loss\">\n            <span className={calculateProfitLoss() >= 0 ? \"text-accent\" : \"text-destructive\"}>\n              {calculateProfitLoss().toFixed(2)} درهم\n            </span>\n            <span className=\"text-sm font-normal text-muted-foreground mr-2\">\n              {calculateProfitLoss() >= 0 ? \"(ربح)\" : \"(خسارة)\"}\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Reports */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sales Report */}\n        <Card>\n          <CardHeader>\n            <CardTitle>تفاصيل المبيعات</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">رقم الفاتورة</TableHead>\n                    <TableHead className=\"text-right\">القناة</TableHead>\n                    <TableHead className=\"text-right\">المبلغ</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {salesReport?.sales.slice(0, 10).map((sale: any) => (\n                    <TableRow key={sale.id}>\n                      <TableCell data-testid={`sale-invoice-${sale.id}`}>\n                        {sale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`sale-channel-${sale.id}`}>\n                        {sale.channel === 'in-store' ? 'متجر' : 'أونلاين'}\n                      </TableCell>\n                      <TableCell data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Expenses Report */}\n        <Card>\n          <CardHeader>\n            <CardTitle>تفاصيل المصروفات</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">الوصف</TableHead>\n                    <TableHead className=\"text-right\">الفئة</TableHead>\n                    <TableHead className=\"text-right\">المبلغ</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {expensesReport?.expenses.slice(0, 10).map((expense: any) => (\n                    <TableRow key={expense.id}>\n                      <TableCell data-testid={`expense-desc-${expense.id}`}>\n                        {expense.description}\n                      </TableCell>\n                      <TableCell data-testid={`expense-category-${expense.id}`}>\n                        {expense.category}\n                      </TableCell>\n                      <TableCell data-testid={`expense-amount-${expense.id}`}>\n                        {parseFloat(expense.amount).toFixed(2)} درهم\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11160},"attached_assets/Accounting_1756384514932.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { EXPENSE_CATEGORIES } from \"@/lib/constants\";\nimport AccountingReports from \"@/components/accounting/AccountingReports\";\n\nexport default function Accounting() {\n  const [showExpenseForm, setShowExpenseForm] = useState(false);\n  const [showPurchaseForm, setShowPurchaseForm] = useState(false);\n  const [expenseData, setExpenseData] = useState({\n    description: \"\",\n    category: \"\",\n    amount: \"\",\n  });\n  const [purchaseData, setPurchaseData] = useState({\n    supplierName: \"\",\n    invoiceNumber: \"\",\n    totalAmount: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createExpenseMutation = useMutation({\n    mutationFn: api.createExpense,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل المصروف بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/expenses\"] });\n      setShowExpenseForm(false);\n      setExpenseData({ description: \"\", category: \"\", amount: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل المصروف\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPurchaseMutation = useMutation({\n    mutationFn: api.createPurchase,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل فاتورة الشراء بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchases\"] });\n      setShowPurchaseForm(false);\n      setPurchaseData({ supplierName: \"\", invoiceNumber: \"\", totalAmount: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل فاتورة الشراء\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExpenseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createExpenseMutation.mutate(expenseData);\n  };\n\n  const handlePurchaseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPurchaseMutation.mutate(purchaseData);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المحاسبة</h1>\n          <p className=\"text-muted-foreground\">إدارة الشؤون المالية والتقارير المحاسبية</p>\n        </div>\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          <Dialog open={showExpenseForm} onOpenChange={setShowExpenseForm}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-add-expense\">\n                <i className=\"fas fa-receipt mr-2 ml-0\"></i>\n                إضافة مصروف\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>إضافة مصروف جديد</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleExpenseSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"description\">وصف المصروف <span className=\"text-destructive\">*</span></Label>\n                  <Textarea\n                    id=\"description\"\n                    value={expenseData.description}\n                    onChange={(e) => setExpenseData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"وصف تفصيلي للمصروف\"\n                    required\n                    data-testid=\"textarea-expense-description\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"category\">فئة المصروف <span className=\"text-destructive\">*</span></Label>\n                  <Select onValueChange={(value) => setExpenseData(prev => ({ ...prev, category: value }))}>\n                    <SelectTrigger data-testid=\"select-expense-category\">\n                      <SelectValue placeholder=\"اختر فئة المصروف\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {EXPENSE_CATEGORIES.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"amount\">المبلغ (درهم) <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={expenseData.amount}\n                    onChange={(e) => setExpenseData(prev => ({ ...prev, amount: e.target.value }))}\n                    placeholder=\"0.00\"\n                    required\n                    data-testid=\"input-expense-amount\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-4 border-t border-border\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowExpenseForm(false)}\n                  >\n                    إلغاء\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createExpenseMutation.isPending}\n                    data-testid=\"button-save-expense\"\n                  >\n                    {createExpenseMutation.isPending ? \"جاري الحفظ...\" : \"حفظ المصروف\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={showPurchaseForm} onOpenChange={setShowPurchaseForm}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-purchase\">\n                <i className=\"fas fa-file-invoice mr-2 ml-0\"></i>\n                فاتورة شراء\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>إضافة فاتورة شراء</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handlePurchaseSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"supplierName\">اسم المورد <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"supplierName\"\n                    value={purchaseData.supplierName}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, supplierName: e.target.value }))}\n                    placeholder=\"اسم المورد أو الشركة\"\n                    required\n                    data-testid=\"input-supplier-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"invoiceNumber\">رقم الفاتورة <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"invoiceNumber\"\n                    value={purchaseData.invoiceNumber}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, invoiceNumber: e.target.value }))}\n                    placeholder=\"رقم فاتورة المورد\"\n                    required\n                    data-testid=\"input-purchase-invoice-number\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"totalAmount\">إجمالي المبلغ (درهم) <span className=\"text-destructive\">*</span></Label>\n                  <Input\n                    id=\"totalAmount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={purchaseData.totalAmount}\n                    onChange={(e) => setPurchaseData(prev => ({ ...prev, totalAmount: e.target.value }))}\n                    placeholder=\"0.00\"\n                    required\n                    data-testid=\"input-purchase-total-amount\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-4 border-t border-border\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowPurchaseForm(false)}\n                  >\n                    إلغاء\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createPurchaseMutation.isPending}\n                    data-testid=\"button-save-purchase\"\n                  >\n                    {createPurchaseMutation.isPending ? \"جاري الحفظ...\" : \"حفظ الفاتورة\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Accounting Reports */}\n      <AccountingReports />\n    </div>\n  );\n}\n","size_bytes":9969},"attached_assets/AddProductModal_1756384552049.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport ColorSizeManager from \"./ColorSizeManager\";\nimport { PRODUCT_TYPES } from \"@/lib/constants\";\n\ninterface AddProductModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddProductModal({ open, onOpenChange }: AddProductModalProps) {\n  const [formData, setFormData] = useState({\n    modelNumber: \"\",\n    companyName: \"\", \n    productType: \"\",\n    storePrice: \"\",\n    onlinePrice: \"\",\n    imageUrl: \"\",\n    specifications: \"\",\n  });\n  \n  const [inventory, setInventory] = useState<Record<string, Record<string, number>>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createProductMutation = useMutation({\n    mutationFn: api.createProduct,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم إضافة المنتج بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في إضافة المنتج\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      modelNumber: \"\",\n      companyName: \"\",\n      productType: \"\",\n      storePrice: \"\",\n      onlinePrice: \"\",\n      imageUrl: \"\",\n      specifications: \"\",\n    });\n    setInventory({});\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Prepare inventory data\n    const inventoryItems = [];\n    for (const color in inventory) {\n      for (const size in inventory[color]) {\n        if (inventory[color][size] > 0) {\n          inventoryItems.push({\n            color,\n            size,\n            quantity: inventory[color][size],\n            productId: \"\", // Will be set by the backend\n          });\n        }\n      }\n    }\n\n    createProductMutation.mutate({\n      product: formData,\n      inventory: inventoryItems,\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>إضافة منتج جديد</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Product Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"modelNumber\">رقم الموديل <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"modelNumber\"\n                data-testid=\"input-model-number\"\n                value={formData.modelNumber}\n                onChange={(e) => handleInputChange(\"modelNumber\", e.target.value)}\n                placeholder=\"مثال: DRS-001\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"companyName\">اسم الشركة <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"companyName\"\n                data-testid=\"input-company-name\"\n                value={formData.companyName}\n                onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\n                placeholder=\"مثال: شركة الأزياء الراقية\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"productType\">نوع المنتج <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => handleInputChange(\"productType\", value)}>\n                <SelectTrigger data-testid=\"select-product-type\">\n                  <SelectValue placeholder=\"اختر نوع المنتج\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PRODUCT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"imageUrl\">رابط الصورة</Label>\n              <Input\n                id=\"imageUrl\"\n                data-testid=\"input-image-url\"\n                value={formData.imageUrl}\n                onChange={(e) => handleInputChange(\"imageUrl\", e.target.value)}\n                placeholder=\"https://example.com/image.jpg\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"storePrice\">سعر المتجر (درهم) <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"storePrice\"\n                data-testid=\"input-store-price\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.storePrice}\n                onChange={(e) => handleInputChange(\"storePrice\", e.target.value)}\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"onlinePrice\">سعر الأونلاين (درهم) <span className=\"text-destructive\">*</span></Label>\n              <Input\n                id=\"onlinePrice\"\n                data-testid=\"input-online-price\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.onlinePrice}\n                onChange={(e) => handleInputChange(\"onlinePrice\", e.target.value)}\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"specifications\">مواصفات المنتج</Label>\n            <Textarea\n              id=\"specifications\"\n              data-testid=\"textarea-specifications\"\n              value={formData.specifications}\n              onChange={(e) => handleInputChange(\"specifications\", e.target.value)}\n              placeholder=\"وصف تفصيلي للمنتج...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Colors and Sizes */}\n          <div>\n            <ColorSizeManager \n              inventory={inventory}\n              onInventoryChange={setInventory}\n            />\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createProductMutation.isPending}\n              data-testid=\"button-save-product\"\n            >\n              {createProductMutation.isPending ? \"جاري الحفظ...\" : \"حفظ المنتج\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7790},"attached_assets/AvailableInventory_1756384565249.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface InventoryItem {\n  id: string;\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n}\n\ninterface AvailableInventoryProps {\n  productId: string;\n  onColorSelect: (color: string) => void;\n  onSizeSelect: (size: string) => void;\n  selectedColor?: string;\n  selectedSize?: string;\n}\n\nexport default function AvailableInventory({ \n  productId, \n  onColorSelect, \n  onSizeSelect, \n  selectedColor, \n  selectedSize \n}: AvailableInventoryProps) {\n  const { data: inventory, isLoading } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/products\", productId, \"inventory\"],\n    queryFn: () => api.getProductInventory(productId),\n    enabled: !!productId,\n  });\n\n  if (isLoading) {\n    return <div className=\"text-sm text-muted-foreground\">جاري تحميل المخزون...</div>;\n  }\n\n  if (!inventory || inventory.length === 0) {\n    return <div className=\"text-sm text-muted-foreground\">لا توجد كميات متوفرة لهذا المنتج</div>;\n  }\n\n  // Group inventory by colors\n  const colorGroups = inventory.reduce((groups, item) => {\n    if (!groups[item.color]) {\n      groups[item.color] = [];\n    }\n    groups[item.color].push(item);\n    return groups;\n  }, {} as Record<string, InventoryItem[]>);\n\n  // Get available colors (colors with quantity > 0)\n  const availableColors = Object.keys(colorGroups).filter(color => \n    colorGroups[color].some(item => item.quantity > 0)\n  );\n\n  // Get available sizes for selected color\n  const availableSizes = selectedColor && colorGroups[selectedColor] \n    ? colorGroups[selectedColor].filter(item => item.quantity > 0)\n    : [];\n\n  // Get quantity for selected color and size\n  const getQuantity = (color: string, size: string): number => {\n    const item = inventory.find(inv => inv.color === color && inv.size === size);\n    return item ? item.quantity : 0;\n  };\n\n  return (\n    <div className=\"space-y-4 border border-border rounded-lg p-4 bg-muted/20\">\n      <h5 className=\"font-medium text-sm\">المخزون المتوفر:</h5>\n      \n      {/* Available Colors */}\n      <div>\n        <label className=\"text-xs text-muted-foreground mb-2 block\">الألوان المتوفرة:</label>\n        <div className=\"flex flex-wrap gap-2\">\n          {availableColors.map((color) => {\n            const totalQuantity = colorGroups[color].reduce((sum, item) => sum + item.quantity, 0);\n            return (\n              <button\n                key={color}\n                type=\"button\"\n                onClick={() => onColorSelect(color)}\n                className={`px-3 py-1 rounded-full text-xs border transition-colors ${\n                  selectedColor === color\n                    ? 'bg-primary text-primary-foreground border-primary'\n                    : 'bg-background border-border hover:bg-muted'\n                }`}\n                data-testid={`button-select-color-${color}`}\n              >\n                {color} ({totalQuantity})\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Available Sizes for Selected Color */}\n      {selectedColor && availableSizes.length > 0 && (\n        <div>\n          <label className=\"text-xs text-muted-foreground mb-2 block\">المقاسات المتوفرة لـ {selectedColor}:</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {availableSizes.map((item) => (\n              <button\n                key={item.size}\n                type=\"button\"\n                onClick={() => onSizeSelect(item.size)}\n                className={`px-3 py-1 rounded-full text-xs border transition-colors ${\n                  selectedSize === item.size\n                    ? 'bg-primary text-primary-foreground border-primary'\n                    : 'bg-background border-border hover:bg-muted'\n                }`}\n                data-testid={`button-select-size-${item.size}`}\n              >\n                {item.size} ({item.quantity})\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Quantity Info */}\n      {selectedColor && selectedSize && (\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-xs text-muted-foreground\">الكمية المتوفرة:</span>\n          <Badge variant={getQuantity(selectedColor, selectedSize) > 0 ? \"default\" : \"destructive\"}>\n            {getQuantity(selectedColor, selectedSize)} قطعة\n          </Badge>\n        </div>\n      )}\n\n      {/* Summary */}\n      <div className=\"text-xs text-muted-foreground\">\n        إجمالي: {availableColors.length} لون، {inventory.filter(item => item.quantity > 0).length} مقاس متوفر\n      </div>\n    </div>\n  );\n}","size_bytes":4899},"attached_assets/ColorSizeGrid_1756384552050.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ColorSizeGridProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n}\n\ninterface InventoryItem {\n  color: string;\n  size: string;\n  quantity: number;\n}\n\nexport default function ColorSizeGrid({ inventory, onInventoryChange }: ColorSizeGridProps) {\n  const [items, setItems] = useState<InventoryItem[]>(() => {\n    const existingItems: InventoryItem[] = [];\n    Object.keys(inventory).forEach(color => {\n      Object.keys(inventory[color]).forEach(size => {\n        if (inventory[color][size] > 0) {\n          existingItems.push({\n            color,\n            size,\n            quantity: inventory[color][size]\n          });\n        }\n      });\n    });\n    return existingItems.length > 0 ? existingItems : [{ color: \"\", size: \"\", quantity: 0 }];\n  });\n\n  const updateInventoryFromItems = (newItems: InventoryItem[]) => {\n    const newInventory: Record<string, Record<string, number>> = {};\n    \n    newItems.forEach(item => {\n      if (item.color && item.size && item.quantity > 0) {\n        if (!newInventory[item.color]) {\n          newInventory[item.color] = {};\n        }\n        newInventory[item.color][item.size] = item.quantity;\n      }\n    });\n    \n    onInventoryChange(newInventory);\n  };\n\n  const handleItemChange = (index: number, field: keyof InventoryItem, value: string | number) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], [field]: value };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const addItem = () => {\n    const newItems = [...items, { color: \"\", size: \"\", quantity: 0 }];\n    setItems(newItems);\n  };\n\n  const removeItem = (index: number) => {\n    const newItems = items.filter((_, i) => i !== index);\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h5 className=\"font-medium\">إدخال الألوان والمقاسات</h5>\n        <Button \n          type=\"button\" \n          onClick={addItem}\n          size=\"sm\"\n          data-testid=\"button-add-color-size\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة لون ومقاس\n        </Button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {items.map((item, index) => (\n          <div key={index} className=\"grid grid-cols-4 gap-3 p-3 border border-border rounded-lg\">\n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">اللون</Label>\n              <Input\n                placeholder=\"مثال: أسود، أبيض، أحمر\"\n                value={item.color}\n                onChange={(e) => handleItemChange(index, \"color\", e.target.value)}\n                data-testid={`input-color-${index}`}\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">المقاس</Label>\n              <Input\n                placeholder=\"مثال: 38، 40، L، XL\"\n                value={item.size}\n                onChange={(e) => handleItemChange(index, \"size\", e.target.value)}\n                data-testid={`input-size-${index}`}\n              />\n            </div>\n            \n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1\">الكمية</Label>\n              <Input\n                type=\"number\"\n                min=\"0\"\n                placeholder=\"0\"\n                value={item.quantity || \"\"}\n                onChange={(e) => handleItemChange(index, \"quantity\", parseInt(e.target.value) || 0)}\n                data-testid={`input-quantity-${index}`}\n              />\n            </div>\n            \n            <div className=\"flex items-end\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeItem(index)}\n                disabled={items.length === 1}\n                data-testid={`button-remove-item-${index}`}\n              >\n                <i className=\"fas fa-trash text-destructive\"></i>\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {items.length === 0 && (\n        <div className=\"text-center text-muted-foreground py-4\">\n          اضغط \"إضافة لون ومقاس\" لبدء إدخال المخزون\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4664},"attached_assets/ColorSizeManager_1756384552051.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport SizeQuantityGrid from \"./SizeQuantityGrid\";\n\ninterface ColorSizeManagerProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n}\n\nexport default function ColorSizeManager({ inventory, onInventoryChange }: ColorSizeManagerProps) {\n  const [colors, setColors] = useState<string[]>(() => {\n    const existingColors = Object.keys(inventory);\n    return existingColors.length > 0 ? existingColors : [\"افتراضي\"];\n  });\n  \n  const [newColor, setNewColor] = useState(\"\");\n  const [activeColor, setActiveColor] = useState<string>(colors[0] || \"افتراضي\");\n\n  const addColor = () => {\n    if (newColor.trim() && !colors.includes(newColor.trim())) {\n      const updatedColors = [...colors, newColor.trim()];\n      setColors(updatedColors);\n      setActiveColor(newColor.trim());\n      setNewColor(\"\");\n      \n      // Initialize empty inventory for new color\n      const updatedInventory = { ...inventory };\n      if (!updatedInventory[newColor.trim()]) {\n        updatedInventory[newColor.trim()] = {};\n      }\n      onInventoryChange(updatedInventory);\n    }\n  };\n\n  const removeColor = (colorToRemove: string) => {\n    if (colors.length > 1) {\n      const updatedColors = colors.filter(color => color !== colorToRemove);\n      setColors(updatedColors);\n      \n      // Remove color from inventory\n      const updatedInventory = { ...inventory };\n      delete updatedInventory[colorToRemove];\n      onInventoryChange(updatedInventory);\n      \n      // Set active color to first remaining color\n      if (activeColor === colorToRemove) {\n        setActiveColor(updatedColors[0]);\n      }\n    }\n  };\n\n  const getTotalQuantityForColor = (color: string): number => {\n    if (!inventory[color]) return 0;\n    return Object.values(inventory[color]).reduce((sum, qty) => sum + qty, 0);\n  };\n\n  const getAvailableSizesCount = (color: string): number => {\n    if (!inventory[color]) return 0;\n    return Object.values(inventory[color]).filter(qty => qty > 0).length;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Color Management Header */}\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-lg font-semibold\">إدارة الألوان والمقاسات</h4>\n        <div className=\"flex items-center gap-2\">\n          <Input\n            value={newColor}\n            onChange={(e) => setNewColor(e.target.value)}\n            placeholder=\"اسم اللون الجديد\"\n            className=\"w-40\"\n            data-testid=\"input-new-color\"\n          />\n          <Button \n            onClick={addColor}\n            disabled={!newColor.trim() || colors.includes(newColor.trim())}\n            size=\"sm\"\n            data-testid=\"button-add-color\"\n          >\n            <i className=\"fas fa-plus mr-2 ml-0\"></i>\n            إضافة لون\n          </Button>\n        </div>\n      </div>\n\n      {/* Color Statistics Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {colors.map((color) => (\n          <div key={color} className=\"bg-card border border-border rounded-lg p-4 text-center\">\n            <div className=\"font-semibold text-lg mb-2\">{color}</div>\n            <div className=\"text-2xl font-bold text-primary mb-1\">\n              {getTotalQuantityForColor(color)}\n            </div>\n            <div className=\"text-sm text-muted-foreground mb-2\">قطعة إجمالي</div>\n            <div className=\"text-xs text-muted-foreground\">\n              {getAvailableSizesCount(color)} مقاس متوفر\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Color Tabs */}\n      <Tabs value={activeColor} onValueChange={setActiveColor} className=\"w-full\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {colors.map((color) => (\n            <div key={color} className=\"relative\">\n              <Button\n                type=\"button\"\n                variant={activeColor === color ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setActiveColor(color)}\n                className=\"pr-8\"\n                data-testid={`button-color-tab-${color}`}\n              >\n                {color}\n              </Button>\n              {colors.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeColor(color);\n                  }}\n                  className=\"absolute -top-1 -right-1 h-4 w-4 bg-destructive text-destructive-foreground rounded-full text-xs flex items-center justify-center hover:bg-destructive/80\"\n                  data-testid={`button-remove-color-${color}`}\n                >\n                  ×\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n        \n        {colors.map((color) => (\n          <TabsContent key={color} value={color} className=\"mt-6\">\n            <SizeQuantityGrid\n              inventory={inventory}\n              onInventoryChange={onInventoryChange}\n              selectedColor={color}\n            />\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":5461},"attached_assets/Dashboard_1756384514933.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { STATUS_LABELS } from \"@/lib/constants\";\nimport { Link } from \"wouter\";\nimport type { ProductWithInventory, SaleWithItems } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: api.getDashboardStats,\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const { data: sales, isLoading: salesLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'in-stock': { label: STATUS_LABELS['in-stock'], className: 'status-badge status-in-stock' },\n      'low-stock': { label: STATUS_LABELS['low-stock'], className: 'status-badge status-low-stock' },\n      'out-of-stock': { label: STATUS_LABELS['out-of-stock'], className: 'status-badge status-out-of-stock' },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || statusMap['in-stock'];\n    return (\n      <span className={statusInfo.className}>\n        {statusInfo.label}\n      </span>\n    );\n  };\n\n  const getPaymentMethodIcon = (paymentMethod: string, channel: string) => {\n    if (channel === 'online') {\n      return paymentMethod === 'bank-transfer' ? \n        <i className=\"fas fa-university text-primary\"></i> : \n        <i className=\"fas fa-globe text-primary\"></i>;\n    }\n    return paymentMethod === 'visa' ? \n      <i className=\"fas fa-credit-card text-accent\"></i> : \n      <i className=\"fas fa-money-bill-wave text-accent\"></i>;\n  };\n\n  const formatTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const saleDate = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - saleDate.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) {\n      return `منذ ${diffInMinutes} دقيقة`;\n    } else if (diffInMinutes < 1440) {\n      const hours = Math.floor(diffInMinutes / 60);\n      return `منذ ${hours} ساعة`;\n    } else {\n      const days = Math.floor(diffInMinutes / 1440);\n      return `منذ ${days} يوم`;\n    }\n  };\n\n  // Get recent products (last 3)\n  const recentProducts = products?.slice(0, 3) || [];\n  \n  // Get recent sales (last 3)\n  const recentSales = sales?.slice(0, 3) || [];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">إجمالي المنتجات</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"stat-total-products\">\n                  {statsLoading ? \"...\" : stats?.totalProducts || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-boxes text-primary\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">↗ 12%</span>\n              <span className=\"text-muted-foreground mr-2\">عن الشهر الماضي</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">مبيعات اليوم</p>\n                <p className=\"text-3xl font-bold text-accent\" data-testid=\"stat-today-sales\">\n                  {statsLoading ? \"...\" : `${stats?.todaySales?.toFixed(2) || \"0.00\"}`}\n                  <span className=\"text-lg mr-1\">درهم</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-chart-line text-accent\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-accent\">↗ 8%</span>\n              <span className=\"text-muted-foreground mr-2\">عن أمس</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">منتجات نفدت</p>\n                <p className=\"text-3xl font-bold text-destructive\" data-testid=\"stat-out-of-stock\">\n                  {statsLoading ? \"...\" : stats?.outOfStockCount || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-exclamation-triangle text-destructive\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-destructive\">تحتاج إعادة تخزين</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">طلبات أونلاين</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"stat-online-orders\">\n                  {statsLoading ? \"...\" : stats?.onlineOrdersCount || 0}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-globe text-primary\"></i>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-muted-foreground\">في انتظار المعالجة</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Content Sections */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Products */}\n        <Card>\n          <CardHeader className=\"border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>أحدث المنتجات</CardTitle>\n              <Link href=\"/inventory\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-products\">\n                  عرض الكل\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {productsLoading ? (\n              <div>جاري التحميل...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentProducts.map((product: ProductWithInventory) => (\n                  <div key={product.id} className=\"flex items-center space-x-4 space-x-reverse\">\n                    <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-tshirt text-muted-foreground\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\" data-testid={`product-name-${product.id}`}>\n                        {product.companyName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`product-model-${product.id}`}>\n                        موديل: {product.modelNumber}\n                      </p>\n                    </div>\n                    <div className=\"text-left\">\n                      {getStatusBadge(product.status)}\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`product-price-${product.id}`}>\n                        {product.storePrice} درهم\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {recentProducts.length === 0 && (\n                  <div className=\"text-center text-muted-foreground py-4\">\n                    لا توجد منتجات متاحة\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Sales */}\n        <Card>\n          <CardHeader className=\"border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>المبيعات الأخيرة</CardTitle>\n              <Link href=\"/sales\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-sales\">\n                  عرض الكل\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {salesLoading ? (\n              <div>جاري التحميل...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentSales.map((sale: SaleWithItems) => (\n                  <div key={sale.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3 space-x-reverse\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        sale.channel === 'online' ? 'bg-primary' : 'bg-accent'\n                      }`}>\n                        {getPaymentMethodIcon(sale.paymentMethod, sale.channel)}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid={`sale-invoice-${sale.id}`}>\n                          فاتورة #{sale.invoiceNumber}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {sale.channel === 'in-store' ? 'متجر' : 'أونلاين'} - {\n                            sale.paymentMethod === 'cash' ? 'نقداً' :\n                            sale.paymentMethod === 'visa' ? 'فيزا' :\n                            sale.paymentMethod === 'bank-transfer' ? 'تحويل بنكي' :\n                            'دفع عند الاستلام'\n                          }\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className={`font-semibold ${sale.channel === 'online' ? 'text-primary' : 'text-accent'}`} \n                         data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {formatTimeAgo(sale.createdAt)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {recentSales.length === 0 && (\n                  <div className=\"text-center text-muted-foreground py-4\">\n                    لا توجد مبيعات متاحة\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>إجراءات سريعة</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Link href=\"/inventory\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-add-product\"\n              >\n                <i className=\"fas fa-plus text-2xl text-primary\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">إضافة منتج</p>\n                  <p className=\"text-sm text-muted-foreground\">أضف منتج جديد للمخزون</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/sales\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-new-sale\"\n              >\n                <i className=\"fas fa-shopping-cart text-2xl text-accent\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">بيع جديد</p>\n                  <p className=\"text-sm text-muted-foreground\">تسجيل عملية بيع</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/returns\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-return\"\n              >\n                <i className=\"fas fa-undo text-2xl text-destructive\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">مرتجع</p>\n                  <p className=\"text-sm text-muted-foreground\">تسجيل مرتجع</p>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link href=\"/accounting\">\n              <Button \n                variant=\"outline\" \n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n                data-testid=\"quick-action-reports\"\n              >\n                <i className=\"fas fa-chart-bar text-2xl text-primary\"></i>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">التقارير</p>\n                  <p className=\"text-sm text-muted-foreground\">عرض التقارير المالية</p>\n                </div>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14329},"attached_assets/Inventory_1756384514933.tsx":{"content":"import { useState } from \"react\";\nimport ProductTable from \"@/components/inventory/ProductTable\";\nimport AddProductModal from \"@/components/inventory/AddProductModal\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Inventory() {\n  const [showAddProduct, setShowAddProduct] = useState(false);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">إدارة المخزون</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع منتجات المتجر</p>\n        </div>\n        <Button \n          onClick={() => setShowAddProduct(true)}\n          data-testid=\"button-add-product-inventory\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة منتج جديد\n        </Button>\n      </div>\n\n      {/* Product Table */}\n      <ProductTable />\n\n      {/* Add Product Modal */}\n      <AddProductModal \n        open={showAddProduct} \n        onOpenChange={setShowAddProduct}\n      />\n    </div>\n  );\n}\n","size_bytes":1120},"attached_assets/ProductTable_1756384552052.tsx":{"content":"import { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { STATUS_LABELS } from \"@/lib/constants\";\nimport type { ProductWithInventory } from \"@shared/schema\";\n\nexport default function ProductTable() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: api.deleteProduct,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حذف المنتج بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حذف المنتج\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products?.filter((product: ProductWithInventory) => {\n    const matchesSearch = product.modelNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.companyName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || product.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المنتج؟\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'in-stock': { label: STATUS_LABELS['in-stock'], variant: 'default' as const },\n      'low-stock': { label: STATUS_LABELS['low-stock'], variant: 'secondary' as const },\n      'out-of-stock': { label: STATUS_LABELS['out-of-stock'], variant: 'destructive' as const },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || statusMap['in-stock'];\n    return (\n      <Badge variant={statusInfo.variant} className=\"status-badge\">\n        {statusInfo.label}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return <div>جاري التحميل...</div>;\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">جدول المخزون</h3>\n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Input\n              placeholder=\"البحث في المنتجات...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-products\"\n            />\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"تصفية حسب الحالة\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">جميع المنتجات</SelectItem>\n                <SelectItem value=\"in-stock\">متوفر</SelectItem>\n                <SelectItem value=\"low-stock\">مخزون قليل</SelectItem>\n                <SelectItem value=\"out-of-stock\">نفذ</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"text-right\">الموديل</TableHead>\n              <TableHead className=\"text-right\">الشركة</TableHead>\n              <TableHead className=\"text-right\">النوع</TableHead>\n              <TableHead className=\"text-right\">سعر المتجر</TableHead>\n              <TableHead className=\"text-right\">سعر الأونلاين</TableHead>\n              <TableHead className=\"text-right\">الحالة</TableHead>\n              <TableHead className=\"text-right\">إجراءات</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredProducts.map((product: ProductWithInventory) => (\n              <TableRow key={product.id} className=\"hover:bg-muted/30\">\n                <TableCell data-testid={`cell-model-${product.id}`}>\n                  {product.modelNumber}\n                </TableCell>\n                <TableCell data-testid={`cell-company-${product.id}`}>\n                  {product.companyName}\n                </TableCell>\n                <TableCell data-testid={`cell-type-${product.id}`}>\n                  {product.productType}\n                </TableCell>\n                <TableCell data-testid={`cell-store-price-${product.id}`}>\n                  {product.storePrice} درهم\n                </TableCell>\n                <TableCell data-testid={`cell-online-price-${product.id}`}>\n                  {product.onlinePrice} درهم\n                </TableCell>\n                <TableCell data-testid={`cell-status-${product.id}`}>\n                  {getStatusBadge(product.status)}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-2 space-x-reverse\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"تعديل\"\n                      data-testid={`button-edit-${product.id}`}\n                    >\n                      <i className=\"fas fa-edit text-primary\"></i>\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"عرض التفاصيل\"\n                      data-testid={`button-view-${product.id}`}\n                    >\n                      <i className=\"fas fa-eye text-muted-foreground\"></i>\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      title=\"حذف\"\n                      onClick={() => handleDelete(product.id)}\n                      disabled={deleteProductMutation.isPending}\n                      data-testid={`button-delete-${product.id}`}\n                    >\n                      <i className=\"fas fa-trash text-destructive\"></i>\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      \n      {filteredProducts.length === 0 && (\n        <div className=\"p-8 text-center text-muted-foreground\">\n          لا توجد منتجات تطابق معايير البحث\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7338},"attached_assets/ReturnForm_1756384559595.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { RETURN_TYPES } from \"@/lib/constants\";\n\ninterface ReturnFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface ReturnItem {\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n}\n\nexport default function ReturnForm({ open, onOpenChange }: ReturnFormProps) {\n  const [returnData, setReturnData] = useState({\n    originalSaleId: \"\",\n    returnType: \"\",\n    refundAmount: \"\",\n  });\n  \n  const [items, setItems] = useState<ReturnItem[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: sales } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: api.createReturn,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل المرتجع بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/returns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل المرتجع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setReturnData({ originalSaleId: \"\", returnType: \"\", refundAmount: \"\" });\n    setItems([]);\n  };\n\n  const loadSaleItems = (saleId: string) => {\n    const sale = sales?.find((s: any) => s.id === saleId);\n    if (sale) {\n      const saleItems = sale.items.map((item: any) => ({\n        productId: item.productId,\n        color: item.color,\n        size: item.size,\n        quantity: 1, // Default to 1, user can adjust\n      }));\n      setItems(saleItems);\n      setReturnData(prev => ({ ...prev, refundAmount: sale.total }));\n    }\n  };\n\n  const addItem = () => {\n    setItems(prev => [...prev, {\n      productId: \"\",\n      color: \"\",\n      size: \"\",\n      quantity: 1,\n    }]);\n  };\n\n  const removeItem = (index: number) => {\n    setItems(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateItem = (index: number, field: keyof ReturnItem, value: any) => {\n    setItems(prev => prev.map((item, i) => \n      i === index ? { ...item, [field]: value } : item\n    ));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (items.length === 0) {\n      toast({\n        title: \"خطأ\",\n        description: \"يجب إضافة عنصر واحد على الأقل للإرجاع\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createReturnMutation.mutate({\n      return: {\n        originalSaleId: returnData.originalSaleId,\n        returnType: returnData.returnType,\n        refundAmount: returnData.returnType === 'refund' ? returnData.refundAmount : \"0\",\n      },\n      items,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل مرتجع</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Return Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"originalSaleId\">الفاتورة الأصلية <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => {\n                setReturnData(prev => ({ ...prev, originalSaleId: value }));\n                loadSaleItems(value);\n              }}>\n                <SelectTrigger data-testid=\"select-original-sale\">\n                  <SelectValue placeholder=\"اختر الفاتورة الأصلية\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sales?.map((sale: any) => (\n                    <SelectItem key={sale.id} value={sale.id}>\n                      {sale.invoiceNumber} - {sale.total} درهم\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"returnType\">نوع المرتجع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setReturnData(prev => ({ ...prev, returnType: value }))}>\n                <SelectTrigger data-testid=\"select-return-type\">\n                  <SelectValue placeholder=\"اختر نوع المرتجع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {RETURN_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {returnData.returnType === 'refund' && (\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"refundAmount\">مبلغ الاسترداد (درهم) <span className=\"text-destructive\">*</span></Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={returnData.refundAmount}\n                  onChange={(e) => setReturnData(prev => ({ ...prev, refundAmount: e.target.value }))}\n                  placeholder=\"0.00\"\n                  data-testid=\"input-refund-amount\"\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Return Items */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-medium\">عناصر المرتجع</h4>\n              <Button \n                type=\"button\" \n                onClick={addItem}\n                data-testid=\"button-add-return-item\"\n              >\n                <i className=\"fas fa-plus mr-2 ml-0\"></i>\n                إضافة عنصر\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {items.map((item, index) => (\n                <div key={index} className=\"border border-border rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 lg:grid-cols-5 gap-4\">\n                    <div>\n                      <Label>المنتج ID</Label>\n                      <Input\n                        value={item.productId}\n                        onChange={(e) => updateItem(index, \"productId\", e.target.value)}\n                        placeholder=\"معرف المنتج\"\n                        data-testid={`input-product-id-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>اللون</Label>\n                      <Input\n                        value={item.color}\n                        onChange={(e) => updateItem(index, \"color\", e.target.value)}\n                        placeholder=\"مثال: أسود، أبيض، أحمر\"\n                        data-testid={`input-return-color-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>المقاس</Label>\n                      <Input\n                        value={item.size}\n                        onChange={(e) => updateItem(index, \"size\", e.target.value)}\n                        placeholder=\"مثال: 38، 40، L، XL\"\n                        data-testid={`input-return-size-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>الكمية</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => updateItem(index, \"quantity\", parseInt(e.target.value) || 1)}\n                        data-testid={`input-return-quantity-${index}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        data-testid={`button-remove-return-item-${index}`}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel-return\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createReturnMutation.isPending}\n              data-testid=\"button-save-return\"\n            >\n              {createReturnMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل المرتجع\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9950},"attached_assets/Returns_1756384514934.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport ReturnForm from \"@/components/returns/ReturnForm\";\nimport type { ReturnWithItems } from \"@shared/schema\";\n\nexport default function Returns() {\n  const [showReturnForm, setShowReturnForm] = useState(false);\n\n  const { data: returns, isLoading } = useQuery({\n    queryKey: [\"/api/returns\"],\n    queryFn: api.getReturns,\n  });\n\n  const formatDateTime = (date: string | Date) => {\n    return new Date(date).toLocaleString('ar-EG', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getReturnTypeBadge = (type: string) => {\n    return type === 'refund' ? (\n      <Badge variant=\"destructive\">استرداد</Badge>\n    ) : (\n      <Badge variant=\"default\">استبدال</Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المرتجعات</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع عمليات الإرجاع</p>\n        </div>\n        <Button \n          onClick={() => setShowReturnForm(true)}\n          data-testid=\"button-new-return\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          مرتجع جديد\n        </Button>\n      </div>\n\n      {/* Returns Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المرتجعات</CardTitle>\n            <i className=\"fas fa-undo text-destructive\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">\n              {isLoading ? \"...\" : returns?.length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المستردات</CardTitle>\n            <i className=\"fas fa-money-bill-wave text-orange-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-500\">\n              {isLoading ? \"...\" : \n                `${returns?.filter((r: ReturnWithItems) => r.returnType === 'refund')\n                  .reduce((sum: number, returnItem: ReturnWithItems) => sum + parseFloat(returnItem.refundAmount), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">عمليات الاستبدال</CardTitle>\n            <i className=\"fas fa-exchange-alt text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\">\n              {isLoading ? \"...\" : \n                returns?.filter((r: ReturnWithItems) => r.returnType === 'exchange').length || 0\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Returns Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>سجل المرتجعات</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">جاري التحميل...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">الفاتورة الأصلية</TableHead>\n                    <TableHead className=\"text-right\">نوع المرتجع</TableHead>\n                    <TableHead className=\"text-right\">مبلغ الاسترداد</TableHead>\n                    <TableHead className=\"text-right\">عدد العناصر</TableHead>\n                    <TableHead className=\"text-right\">التاريخ</TableHead>\n                    <TableHead className=\"text-right\">إجراءات</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {returns?.map((returnItem: ReturnWithItems) => (\n                    <TableRow key={returnItem.id} className=\"hover:bg-muted/30\">\n                      <TableCell className=\"font-medium\" data-testid={`return-original-sale-${returnItem.id}`}>\n                        {returnItem.originalSale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`return-type-${returnItem.id}`}>\n                        {getReturnTypeBadge(returnItem.returnType)}\n                      </TableCell>\n                      <TableCell data-testid={`return-refund-${returnItem.id}`}>\n                        {parseFloat(returnItem.refundAmount).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`return-items-count-${returnItem.id}`}>\n                        {returnItem.items.length}\n                      </TableCell>\n                      <TableCell data-testid={`return-date-${returnItem.id}`}>\n                        {formatDateTime(returnItem.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2 space-x-reverse\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"عرض التفاصيل\"\n                            data-testid={`button-view-return-${returnItem.id}`}\n                          >\n                            <i className=\"fas fa-eye text-muted-foreground\"></i>\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"طباعة\"\n                            data-testid={`button-print-return-${returnItem.id}`}\n                          >\n                            <i className=\"fas fa-print text-primary\"></i>\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {returns?.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا توجد مرتجعات مسجلة\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Return Form Modal */}\n      <ReturnForm \n        open={showReturnForm} \n        onOpenChange={setShowReturnForm}\n      />\n    </div>\n  );\n}\n","size_bytes":7332},"attached_assets/SaleForm_1756384565250.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { PAYMENT_METHODS, SALES_CHANNELS } from \"@/lib/constants\";\nimport AvailableInventory from \"./AvailableInventory\";\n\ninterface SaleFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface SaleItem {\n  productId: string;\n  color: string;\n  size: string;\n  quantity: number;\n  unitPrice: number;\n}\n\nexport default function SaleForm({ open, onOpenChange }: SaleFormProps) {\n  const [saleData, setSaleData] = useState({\n    channel: \"\",\n    paymentMethod: \"\",\n  });\n  \n  const [items, setItems] = useState<SaleItem[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: api.getProducts,\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: api.createSale,\n    onSuccess: () => {\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تسجيل البيع بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ\",\n        description: error.message || \"فشل في تسجيل البيع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSaleData({ channel: \"\", paymentMethod: \"\" });\n    setItems([]);\n  };\n\n  const addItem = () => {\n    setItems(prev => [...prev, {\n      productId: \"\",\n      color: \"\",\n      size: \"\",\n      quantity: 1,\n      unitPrice: 0,\n    }]);\n  };\n\n  const removeItem = (index: number) => {\n    setItems(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const updateItem = (index: number, field: keyof SaleItem, value: any) => {\n    setItems(prev => prev.map((item, i) => \n      i === index ? { ...item, [field]: value } : item\n    ));\n  };\n\n  const calculateSubtotal = () => {\n    return items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);\n  };\n\n  const calculateTotal = () => {\n    const subtotal = calculateSubtotal();\n    const fees = saleData.paymentMethod === 'visa' ? subtotal * 0.05 : 0;\n    return subtotal + fees;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (items.length === 0) {\n      toast({\n        title: \"خطأ\",\n        description: \"يجب إضافة عنصر واحد على الأقل\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const subtotal = calculateSubtotal();\n    \n    const saleItems = items.map(item => ({\n      ...item,\n      totalPrice: item.quantity * item.unitPrice,\n    }));\n\n    createSaleMutation.mutate({\n      sale: {\n        ...saleData,\n        subtotal: subtotal.toFixed(2),\n      },\n      items: saleItems,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto\">\n        <DialogHeader>\n          <DialogTitle>تسجيل بيع جديد</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Sale Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"channel\">قناة البيع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setSaleData(prev => ({ ...prev, channel: value }))}>\n                <SelectTrigger data-testid=\"select-sales-channel\">\n                  <SelectValue placeholder=\"اختر قناة البيع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {SALES_CHANNELS.map((channel) => (\n                    <SelectItem key={channel.value} value={channel.value}>\n                      {channel.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"paymentMethod\">طريقة الدفع <span className=\"text-destructive\">*</span></Label>\n              <Select onValueChange={(value) => setSaleData(prev => ({ ...prev, paymentMethod: value }))}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"اختر طريقة الدفع\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PAYMENT_METHODS.map((method) => (\n                    <SelectItem key={method.value} value={method.value}>\n                      {method.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Sale Items */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h4 className=\"text-lg font-medium\">عناصر البيع</h4>\n              <Button \n                type=\"button\" \n                onClick={addItem}\n                data-testid=\"button-add-item\"\n              >\n                <i className=\"fas fa-plus mr-2 ml-0\"></i>\n                إضافة عنصر\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {items.map((item, index) => (\n                <div key={index} className=\"border border-border rounded-lg p-4\">\n                  <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-4 mb-4\">\n                    <div>\n                      <Label>المنتج</Label>\n                      <Select onValueChange={(value) => {\n                        updateItem(index, \"productId\", value);\n                        const product = products?.find((p: any) => p.id === value);\n                        if (product) {\n                          updateItem(index, \"unitPrice\", parseFloat(saleData.channel === 'in-store' ? product.storePrice : product.onlinePrice));\n                        }\n                      }}>\n                        <SelectTrigger data-testid={`select-product-${index}`}>\n                          <SelectValue placeholder=\"اختر المنتج\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {products?.map((product: any) => (\n                            <SelectItem key={product.id} value={product.id}>\n                              {product.modelNumber} - {product.companyName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label>اللون</Label>\n                      <Input\n                        value={item.color}\n                        onChange={(e) => updateItem(index, \"color\", e.target.value)}\n                        placeholder=\"مثال: أسود، أبيض، أحمر\"\n                        data-testid={`input-color-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>المقاس</Label>\n                      <Input\n                        value={item.size}\n                        onChange={(e) => updateItem(index, \"size\", e.target.value)}\n                        placeholder=\"مثال: 38، 40، L، XL\"\n                        data-testid={`input-size-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>الكمية</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => updateItem(index, \"quantity\", parseInt(e.target.value) || 1)}\n                        data-testid={`input-quantity-${index}`}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label>سعر الوحدة</Label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={item.unitPrice}\n                        onChange={(e) => updateItem(index, \"unitPrice\", parseFloat(e.target.value) || 0)}\n                        data-testid={`input-unit-price-${index}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeItem(index)}\n                        data-testid={`button-remove-item-${index}`}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Available Inventory Display */}\n                  {item.productId && (\n                    <AvailableInventory\n                      productId={item.productId}\n                      onColorSelect={(color) => updateItem(index, \"color\", color)}\n                      onSizeSelect={(size) => updateItem(index, \"size\", size)}\n                      selectedColor={item.color}\n                      selectedSize={item.size}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Summary */}\n          {items.length > 0 && (\n            <div className=\"bg-muted/30 rounded-lg p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>المجموع الفرعي:</span>\n                  <span data-testid=\"text-subtotal\">{calculateSubtotal().toFixed(2)} درهم</span>\n                </div>\n                {saleData.paymentMethod === 'visa' && (\n                  <div className=\"flex justify-between\">\n                    <span>رسوم فيزا (5%):</span>\n                    <span data-testid=\"text-fees\">{(calculateSubtotal() * 0.05).toFixed(2)} درهم</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>المجموع الإجمالي:</span>\n                  <span data-testid=\"text-total\">{calculateTotal().toFixed(2)} درهم</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex items-center justify-end space-x-4 space-x-reverse pt-6 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              إلغاء\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createSaleMutation.isPending}\n              data-testid=\"button-save-sale\"\n            >\n              {createSaleMutation.isPending ? \"جاري الحفظ...\" : \"تسجيل البيع\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11839},"attached_assets/Sales_1756384514935.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport SaleForm from \"@/components/sales/SaleForm\";\nimport type { SaleWithItems } from \"@shared/schema\";\n\nexport default function Sales() {\n  const [showSaleForm, setShowSaleForm] = useState(false);\n\n  const { data: sales, isLoading } = useQuery({\n    queryKey: [\"/api/sales\"],\n    queryFn: api.getSales,\n  });\n\n  const formatDateTime = (date: string | Date) => {\n    return new Date(date).toLocaleString('ar-EG', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getChannelBadge = (channel: string) => {\n    return channel === 'in-store' ? (\n      <Badge variant=\"default\">متجر</Badge>\n    ) : (\n      <Badge variant=\"secondary\">أونلاين</Badge>\n    );\n  };\n\n  const getPaymentMethodLabel = (method: string) => {\n    const methods = {\n      'cash': 'نقداً',\n      'visa': 'فيزا',\n      'bank-transfer': 'تحويل بنكي',\n      'cod': 'دفع عند الاستلام',\n    };\n    return methods[method as keyof typeof methods] || method;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">المبيعات</h1>\n          <p className=\"text-muted-foreground\">إدارة وتتبع جميع عمليات البيع</p>\n        </div>\n        <Button \n          onClick={() => setShowSaleForm(true)}\n          data-testid=\"button-new-sale\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          بيع جديد\n        </Button>\n      </div>\n\n      {/* Sales Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">إجمالي المبيعات اليوم</CardTitle>\n            <i className=\"fas fa-chart-line text-accent\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-accent\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => {\n                  const saleDate = new Date(s.createdAt);\n                  const today = new Date();\n                  return saleDate.toDateString() === today.toDateString();\n                }).reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات المتجر</CardTitle>\n            <i className=\"fas fa-store text-primary\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => s.channel === 'in-store')\n                  .reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">مبيعات أونلاين</CardTitle>\n            <i className=\"fas fa-globe text-blue-500\"></i>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-500\">\n              {isLoading ? \"...\" : \n                `${sales?.filter((s: SaleWithItems) => s.channel === 'online')\n                  .reduce((sum: number, sale: SaleWithItems) => sum + parseFloat(sale.total), 0).toFixed(2) || \"0.00\"} درهم`\n              }\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sales Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>سجل المبيعات</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">جاري التحميل...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-right\">رقم الفاتورة</TableHead>\n                    <TableHead className=\"text-right\">القناة</TableHead>\n                    <TableHead className=\"text-right\">طريقة الدفع</TableHead>\n                    <TableHead className=\"text-right\">المجموع الفرعي</TableHead>\n                    <TableHead className=\"text-right\">الرسوم</TableHead>\n                    <TableHead className=\"text-right\">المجموع الإجمالي</TableHead>\n                    <TableHead className=\"text-right\">التاريخ</TableHead>\n                    <TableHead className=\"text-right\">إجراءات</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sales?.map((sale: SaleWithItems) => (\n                    <TableRow key={sale.id} className=\"hover:bg-muted/30\">\n                      <TableCell className=\"font-medium\" data-testid={`sale-invoice-${sale.id}`}>\n                        {sale.invoiceNumber}\n                      </TableCell>\n                      <TableCell data-testid={`sale-channel-${sale.id}`}>\n                        {getChannelBadge(sale.channel)}\n                      </TableCell>\n                      <TableCell data-testid={`sale-payment-${sale.id}`}>\n                        {getPaymentMethodLabel(sale.paymentMethod)}\n                      </TableCell>\n                      <TableCell data-testid={`sale-subtotal-${sale.id}`}>\n                        {parseFloat(sale.subtotal).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`sale-fees-${sale.id}`}>\n                        {parseFloat(sale.fees).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell className=\"font-semibold\" data-testid={`sale-total-${sale.id}`}>\n                        {parseFloat(sale.total).toFixed(2)} درهم\n                      </TableCell>\n                      <TableCell data-testid={`sale-date-${sale.id}`}>\n                        {formatDateTime(sale.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2 space-x-reverse\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"عرض التفاصيل\"\n                            data-testid={`button-view-sale-${sale.id}`}\n                          >\n                            <i className=\"fas fa-eye text-muted-foreground\"></i>\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            title=\"طباعة\"\n                            data-testid={`button-print-sale-${sale.id}`}\n                          >\n                            <i className=\"fas fa-print text-primary\"></i>\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {sales?.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا توجد مبيعات مسجلة\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Sale Form Modal */}\n      <SaleForm \n        open={showSaleForm} \n        onOpenChange={setShowSaleForm}\n      />\n    </div>\n  );\n}\n","size_bytes":8420},"attached_assets/SizeQuantityGrid_1756384552052.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SizeQuantityItem {\n  size: string;\n  quantity: number;\n  isAvailable: boolean;\n}\n\ninterface SizeQuantityGridProps {\n  inventory: Record<string, Record<string, number>>;\n  onInventoryChange: (inventory: Record<string, Record<string, number>>) => void;\n  selectedColor?: string;\n}\n\nexport default function SizeQuantityGrid({ inventory, onInventoryChange, selectedColor = \"افتراضي\" }: SizeQuantityGridProps) {\n  const [items, setItems] = useState<SizeQuantityItem[]>(() => {\n    const existingItems: SizeQuantityItem[] = [];\n    if (inventory[selectedColor]) {\n      Object.keys(inventory[selectedColor]).forEach(size => {\n        existingItems.push({\n          size,\n          quantity: inventory[selectedColor][size],\n          isAvailable: inventory[selectedColor][size] > 0\n        });\n      });\n    }\n    return existingItems.length > 0 ? existingItems : [{ size: \"\", quantity: 0, isAvailable: false }];\n  });\n\n  const updateInventoryFromItems = (newItems: SizeQuantityItem[]) => {\n    const newInventory = { ...inventory };\n    \n    if (!newInventory[selectedColor]) {\n      newInventory[selectedColor] = {};\n    }\n    \n    // Clear existing sizes for this color\n    newInventory[selectedColor] = {};\n    \n    newItems.forEach(item => {\n      if (item.size && item.quantity >= 0) {\n        newInventory[selectedColor][item.size] = item.quantity;\n      }\n    });\n    \n    onInventoryChange(newInventory);\n  };\n\n  const handleSizeChange = (index: number, size: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], size };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const handleQuantityChange = (index: number, quantity: number) => {\n    const newItems = [...items];\n    newItems[index] = { \n      ...newItems[index], \n      quantity: Math.max(0, quantity),\n      isAvailable: quantity > 0\n    };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const incrementQuantity = (index: number) => {\n    const newQuantity = items[index].quantity + 1;\n    handleQuantityChange(index, newQuantity);\n  };\n\n  const decrementQuantity = (index: number) => {\n    const newQuantity = Math.max(0, items[index].quantity - 1);\n    handleQuantityChange(index, newQuantity);\n  };\n\n  const toggleAvailability = (index: number) => {\n    const newItems = [...items];\n    const newAvailability = !newItems[index].isAvailable;\n    newItems[index] = { \n      ...newItems[index], \n      isAvailable: newAvailability,\n      quantity: newAvailability ? Math.max(1, newItems[index].quantity) : 0\n    };\n    setItems(newItems);\n    updateInventoryFromItems(newItems);\n  };\n\n  const addSizeItem = () => {\n    const newItems = [...items, { size: \"\", quantity: 0, isAvailable: false }];\n    setItems(newItems);\n  };\n\n  const removeSizeItem = (index: number) => {\n    if (items.length > 1) {\n      const newItems = items.filter((_, i) => i !== index);\n      setItems(newItems);\n      updateInventoryFromItems(newItems);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <h5 className=\"font-medium\">إدارة المقاسات والكميات</h5>\n          <span className=\"text-sm text-muted-foreground\">({selectedColor})</span>\n        </div>\n        <Button \n          type=\"button\" \n          onClick={addSizeItem}\n          size=\"sm\"\n          variant=\"outline\"\n          data-testid=\"button-add-size\"\n        >\n          <i className=\"fas fa-plus mr-2 ml-0\"></i>\n          إضافة مقاس\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {items.map((item, index) => (\n          <div key={index} className={`border-2 rounded-lg p-4 transition-all ${\n            item.isAvailable \n              ? 'border-green-200 bg-green-50/50' \n              : 'border-gray-200 bg-gray-50/50'\n          }`}>\n            {/* Size Header */}\n            <div className=\"text-center mb-4\">\n              <Input\n                value={item.size}\n                onChange={(e) => handleSizeChange(index, e.target.value)}\n                placeholder=\"مقاس 44\"\n                className=\"text-center text-lg font-semibold border-none bg-transparent\"\n                data-testid={`input-size-${index}`}\n              />\n            </div>\n\n            {/* Quantity Display */}\n            <div className=\"text-center mb-4\">\n              <div className=\"text-3xl font-bold text-amber-600 mb-1\">\n                {item.quantity}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">قطعة</div>\n            </div>\n\n            {/* Quantity Controls */}\n            <div className=\"flex items-center justify-center mb-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => decrementQuantity(index)}\n                disabled={item.quantity <= 0}\n                className=\"rounded-r-none\"\n                data-testid={`button-decrement-${index}`}\n              >\n                <i className=\"fas fa-minus\"></i>\n              </Button>\n              \n              <Input\n                type=\"number\"\n                min=\"0\"\n                value={item.quantity || \"\"}\n                onChange={(e) => handleQuantityChange(index, parseInt(e.target.value) || 0)}\n                className=\"text-center border-l-0 border-r-0 rounded-none w-20\"\n                data-testid={`input-quantity-${index}`}\n              />\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => incrementQuantity(index)}\n                className=\"rounded-l-none\"\n                data-testid={`button-increment-${index}`}\n              >\n                <i className=\"fas fa-plus\"></i>\n              </Button>\n            </div>\n\n            {/* Availability Toggle */}\n            <div className=\"space-y-2\">\n              <Button\n                type=\"button\"\n                variant={item.isAvailable ? \"destructive\" : \"default\"}\n                size=\"sm\"\n                onClick={() => toggleAvailability(index)}\n                className=\"w-full\"\n                data-testid={`button-availability-${index}`}\n              >\n                <i className={`fas ${item.isAvailable ? 'fa-minus' : 'fa-plus'} mr-2 ml-0`}></i>\n                {item.isAvailable ? 'نفد المخزون' : 'بيع قطعة'}\n              </Button>\n              \n              <div className=\"text-center\">\n                <span className={`text-sm ${\n                  item.isAvailable ? 'text-green-600' : 'text-orange-500'\n                }`}>\n                  {item.isAvailable ? 'متوفر' : 'مخزون منتهي!'}\n                </span>\n              </div>\n            </div>\n\n            {/* Remove Button */}\n            {items.length > 1 && (\n              <div className=\"mt-3 pt-3 border-t border-border\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeSizeItem(index)}\n                  className=\"w-full text-destructive hover:text-destructive\"\n                  data-testid={`button-remove-size-${index}`}\n                >\n                  <i className=\"fas fa-trash mr-2 ml-0\"></i>\n                  حذف المقاس\n                </Button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      {items.length === 0 && (\n        <div className=\"text-center text-muted-foreground py-8\">\n          <i className=\"fas fa-box-open text-4xl mb-4 block\"></i>\n          اضغط \"إضافة مقاس\" لبدء إضافة المقاسات والكميات\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8083},"attached_assets/drizzle.config_1756384141176.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/index_1756384408394.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"attached_assets/index_1756384432941.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"attached_assets/not-found_1756384514934.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/postcss.config_1756384141179.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/replit_1756384141180.md":{"content":"# Store Management System - LAROZA\n\n## Overview\n\nThis is a full-stack web application for LAROZA (لاروزا), an internal store management system designed for employees. The system provides comprehensive inventory management, sales tracking, returns processing, and accounting capabilities, all with a complete Arabic interface using right-to-left (RTL) layout.\n\nThe application follows a modern web architecture with React frontend, Express.js backend, and PostgreSQL database, utilizing TypeScript throughout for type safety and better development experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Library**: Shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with RTL support and custom Arabic fonts (Cairo, Amiri)\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Layout**: Responsive design with sidebar navigation and RTL support\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints following standard HTTP conventions\n- **Middleware**: Custom logging, CORS, and error handling\n- **Development**: Hot reloading with Vite integration for full-stack development\n\n### Database Architecture\n- **Database**: PostgreSQL with Drizzle ORM\n- **Schema Design**: Normalized relational structure with proper foreign key relationships\n- **Key Tables**:\n  - Products: Core product information with model numbers\n  - Product Inventory: Color/size matrix with quantities (6 colors × 8 sizes)\n  - Sales: Transaction records with payment methods and channels\n  - Sale Items: Line items linking products to sales\n  - Returns: Return transactions with refund/exchange tracking\n  - Expenses: Business expense tracking\n  - Purchases: Supplier purchase records\n\n### Data Flow Architecture\n- **Product Management**: Multi-dimensional inventory tracking (color × size × quantity)\n- **Sales Processing**: Automatic inventory deduction with payment fee calculations\n- **Returns System**: Inventory restoration with accounting adjustments\n- **Reporting**: Date-range filtering for sales, expenses, and profit/loss analysis\n\n### Component Architecture\n- **Modular Design**: Feature-based component organization\n- **Shared Components**: Reusable UI components in `/components/ui`\n- **Page Components**: Route-specific components in `/pages`\n- **Form Components**: Specialized forms for sales, returns, and inventory management\n- **Layout Components**: Consistent sidebar navigation and header structure\n\n### Type Safety\n- **Shared Schema**: Common TypeScript types between frontend and backend\n- **Validation**: Zod schemas for runtime type checking and form validation\n- **Database Types**: Drizzle-generated types for type-safe database operations\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Type-safe ORM for PostgreSQL with migration support\n- **@tanstack/react-query**: Server state management and caching\n\n### UI and Styling Dependencies\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework with RTL support\n- **class-variance-authority**: Type-safe CSS class composition\n- **lucide-react**: Modern icon library\n\n### Form and Validation Dependencies\n- **react-hook-form**: Performant form library with validation\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **zod**: TypeScript-first schema validation\n\n### Development Dependencies\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Font Dependencies\n- **Google Fonts**: Cairo and Amiri fonts for proper Arabic typography\n- **Font Awesome**: Icon library for UI elements\n\n### Database Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle Kit**: Database migration and schema management tools","size_bytes":4353},"attached_assets/routes_1756384408395.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/routes_1756384451228.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/routes_1756384459943.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertProductInventorySchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertReturnSchema,\n  insertReturnItemSchema,\n  insertExpenseSchema,\n  insertPurchaseSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body.product);\n      const inventoryData = z.array(insertProductInventorySchema).parse(req.body.inventory);\n\n      // Check if model number already exists\n      const existingProduct = await storage.getProductByModelNumber(productData.modelNumber);\n      if (existingProduct) {\n        return res.status(400).json({ message: \"Model number already exists\" });\n      }\n\n      const product = await storage.createProduct(productData);\n      \n      // Add inventory items\n      const inventoryItems = inventoryData.map(item => ({ ...item, productId: product.id }));\n      await storage.bulkUpdateInventory(inventoryItems);\n\n      const productWithInventory = await storage.getProductById(product.id);\n      res.status(201).json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const updatedProduct = await storage.updateProduct(req.params.id, productData);\n      \n      if (!updatedProduct) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      const productWithInventory = await storage.getProductById(req.params.id);\n      res.json(productWithInventory);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteProduct(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getProductInventory(req.params.id);\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.put(\"/api/products/:id/inventory\", async (req, res) => {\n    try {\n      const { color, size, quantity } = req.body;\n      const updatedInventory = await storage.updateInventory(req.params.id, color, size, quantity);\n      res.json(updatedInventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inventory\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json(sales);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  app.get(\"/api/sales/:id\", async (req, res) => {\n    try {\n      const sale = await storage.getSaleById(req.params.id);\n      if (!sale) {\n        return res.status(404).json({ message: \"Sale not found\" });\n      }\n      res.json(sale);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sale\" });\n    }\n  });\n\n  app.post(\"/api/sales\", async (req, res) => {\n    try {\n      const saleData = insertSaleSchema.parse(req.body.sale);\n      const items = z.array(insertSaleItemSchema).parse(req.body.items);\n\n      // Calculate fees for Visa payments\n      let fees = 0;\n      if (saleData.paymentMethod === 'visa') {\n        fees = parseFloat(saleData.subtotal) * 0.05; // 5% fee\n      }\n\n      const total = parseFloat(saleData.subtotal) + fees;\n      \n      const saleWithCalculations = {\n        ...saleData,\n        fees: fees.toFixed(2),\n        total: total.toFixed(2),\n      };\n\n      const sale = await storage.createSale(saleWithCalculations, items);\n      res.status(201).json(sale);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create sale\" });\n    }\n  });\n\n  // Returns routes\n  app.get(\"/api/returns\", async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch returns\" });\n    }\n  });\n\n  app.post(\"/api/returns\", async (req, res) => {\n    try {\n      const returnData = insertReturnSchema.parse(req.body.return);\n      const items = z.array(insertReturnItemSchema).parse(req.body.items);\n\n      const returnRecord = await storage.createReturn(returnData, items);\n      res.status(201).json(returnRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create return\" });\n    }\n  });\n\n  // Expenses routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenses = await storage.getExpenses();\n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  // Purchases routes\n  app.get(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchases = await storage.getPurchases();\n      res.json(purchases);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch purchases\" });\n    }\n  });\n\n  app.post(\"/api/purchases\", async (req, res) => {\n    try {\n      const purchaseData = insertPurchaseSchema.parse(req.body);\n      const purchase = await storage.createPurchase(purchaseData);\n      res.status(201).json(purchase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create purchase\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/reports/sales\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const sales = await storage.getSalesByDateRange(start, end);\n      \n      // Calculate totals by channel\n      const inStoreSales = sales.filter(sale => sale.channel === 'in-store');\n      const onlineSales = sales.filter(sale => sale.channel === 'online');\n      \n      const inStoreTotal = inStoreSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      const onlineTotal = onlineSales.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n      \n      res.json({\n        sales,\n        summary: {\n          totalSales: inStoreTotal + onlineTotal,\n          inStoreTotal,\n          onlineTotal,\n          inStoreCount: inStoreSales.length,\n          onlineCount: onlineSales.length,\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  app.get(\"/api/reports/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      \n      const expenses = await storage.getExpensesByDateRange(start, end);\n      const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n      \n      res.json({\n        expenses,\n        totalExpenses,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate expenses report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10006},"attached_assets/schema_1756384485401.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  modelNumber: varchar(\"model_number\").notNull().unique(),\n  companyName: text(\"company_name\").notNull(),\n  productType: varchar(\"product_type\").notNull(),\n  storePrice: decimal(\"store_price\", { precision: 10, scale: 2 }).notNull(),\n  onlinePrice: decimal(\"online_price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  specifications: text(\"specifications\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Product inventory (colors and sizes)\nexport const productInventory = pgTable(\"product_inventory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(), // black, white, red, blue, green, brown\n  size: varchar(\"size\").notNull(), // 38, 40, 42, 44, 46, 48, 50, 52\n  quantity: integer(\"quantity\").notNull().default(0),\n});\n\n// Sales table\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  channel: varchar(\"channel\").notNull(), // \"in-store\" or \"online\"\n  paymentMethod: varchar(\"payment_method\").notNull(), // \"cash\", \"visa\", \"bank-transfer\", \"cod\"\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  fees: decimal(\"fees\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Sale items\nexport const saleItems = pgTable(\"sale_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleId: varchar(\"sale_id\").references(() => sales.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(),\n  size: varchar(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Returns table\nexport const returns = pgTable(\"returns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalSaleId: varchar(\"original_sale_id\").references(() => sales.id).notNull(),\n  returnType: varchar(\"return_type\").notNull(), // \"refund\" or \"exchange\"\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Return items\nexport const returnItems = pgTable(\"return_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  returnId: varchar(\"return_id\").references(() => returns.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  color: varchar(\"color\").notNull(),\n  size: varchar(\"size\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(), // \"rent\", \"salaries\", \"utilities\", \"other\"\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Purchase invoices from suppliers\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplierName: text(\"supplier_name\").notNull(),\n  invoiceNumber: varchar(\"invoice_number\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").defaultNow().notNull(),\n});\n\n// Schemas for validation\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductInventorySchema = createInsertSchema(productInventory).omit({\n  id: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  invoiceNumber: true,\n  createdAt: true,\n});\n\nexport const insertSaleItemSchema = createInsertSchema(saleItems).omit({\n  id: true,\n});\n\nexport const insertReturnSchema = createInsertSchema(returns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReturnItemSchema = createInsertSchema(returnItems).omit({\n  id: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n});\n\n// Types\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type ProductInventory = typeof productInventory.$inferSelect;\nexport type InsertProductInventory = z.infer<typeof insertProductInventorySchema>;\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type SaleItem = typeof saleItems.$inferSelect;\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\nexport type Return = typeof returns.$inferSelect;\nexport type InsertReturn = z.infer<typeof insertReturnSchema>;\nexport type ReturnItem = typeof returnItems.$inferSelect;\nexport type InsertReturnItem = z.infer<typeof insertReturnItemSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\n\n// Extended types for API responses\nexport type ProductWithInventory = Product & {\n  inventory: ProductInventory[];\n  totalQuantity: number;\n  status: 'in-stock' | 'low-stock' | 'out-of-stock';\n};\n\nexport type SaleWithItems = Sale & {\n  items: (SaleItem & { product: Product })[];\n};\n\nexport type ReturnWithItems = Return & {\n  items: (ReturnItem & { product: Product })[];\n  originalSale: Sale;\n};\n\n// Constants\nexport const COLORS = ['black', 'white', 'red', 'blue', 'green', 'brown'] as const;\nexport const SIZES = ['38', '40', '42', '44', '46', '48', '50', '52'] as const;\nexport const PRODUCT_TYPES = ['dress', 'evening-wear', 'hijab', 'abaya', 'accessories'] as const;\nexport const PAYMENT_METHODS = ['cash', 'visa', 'bank-transfer', 'cod'] as const;\nexport const EXPENSE_CATEGORIES = ['rent', 'salaries', 'utilities', 'other'] as const;\n","size_bytes":6695},"attached_assets/storage_1756384408396.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<ProductWithInventory[]>;\n  getProductById(id: string): Promise<ProductWithInventory | undefined>;\n  getProductByModelNumber(modelNumber: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Product Inventory\n  getProductInventory(productId: string): Promise<ProductInventory[]>;\n  updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory>;\n  bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]>;\n  \n  // Sales\n  getSales(): Promise<SaleWithItems[]>;\n  getSaleById(id: string): Promise<SaleWithItems | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems>;\n  getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]>;\n  \n  // Returns\n  getReturns(): Promise<ReturnWithItems[]>;\n  getReturnById(id: string): Promise<ReturnWithItems | undefined>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]>;\n  \n  // Purchases\n  getPurchases(): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private inventory: Map<string, ProductInventory> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private saleItems: Map<string, SaleItem> = new Map();\n  private returns: Map<string, Return> = new Map();\n  private returnItems: Map<string, ReturnItem> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private purchases: Map<string, Purchase> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for testing\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const product1: Product = {\n      id: randomUUID(),\n      modelNumber: \"EVE-001\",\n      companyName: \"شركة الأزياء الراقية\",\n      productType: \"evening-wear\",\n      storePrice: \"890.00\",\n      onlinePrice: \"850.00\",\n      imageUrl: null,\n      specifications: \"فستان سهرة أنيق مصنوع من أجود الأقمشة\",\n      createdAt: new Date(),\n    };\n\n    const product2: Product = {\n      id: randomUUID(),\n      modelNumber: \"HIJ-025\",\n      companyName: \"شركة الحجاب الفاخر\",\n      productType: \"hijab\",\n      storePrice: \"150.00\",\n      onlinePrice: \"140.00\",\n      imageUrl: null,\n      specifications: \"حجاب حرير فاخر بجودة عالية\",\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Sample inventory\n    COLORS.forEach((color) => {\n      SIZES.forEach((size) => {\n        const inventory1: ProductInventory = {\n          id: randomUUID(),\n          productId: product1.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 20) + 1,\n        };\n        const inventory2: ProductInventory = {\n          id: randomUUID(),\n          productId: product2.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 10) + 1,\n        };\n        this.inventory.set(inventory1.id, inventory1);\n        this.inventory.set(inventory2.id, inventory2);\n      });\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsArray = Array.from(this.products.values());\n    const productsWithInventory = await Promise.all(\n      productsArray.map(async (product) => {\n        const inventory = await this.getProductInventory(product.id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(p => p.modelNumber === modelNumber);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      imageUrl: insertProduct.imageUrl || null,\n      specifications: insertProduct.specifications || null,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) return undefined;\n\n    const updatedProduct = { ...existingProduct, ...updateData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.inventory.values()).filter(item => item.productId === productId);\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const existingItem = Array.from(this.inventory.values()).find(\n      item => item.productId === productId && item.color === color && item.size === size\n    );\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      this.inventory.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      const id = randomUUID();\n      const newItem: ProductInventory = {\n        id,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      this.inventory.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]> {\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const result = await this.updateInventory(item.productId, item.color, item.size, item.quantity || 0);\n      results.push(result);\n    }\n    \n    return results;\n  }\n\n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesArray = Array.from(this.sales.values());\n    return Promise.all(\n      salesArray.map(async (sale) => {\n        const items = Array.from(this.saleItems.values())\n          .filter(item => item.saleId === sale.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        return {\n          ...sale,\n          items,\n        } as SaleWithItems;\n      })\n    );\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const sale = this.sales.get(id);\n    if (!sale) return undefined;\n\n    const items = Array.from(this.saleItems.values())\n      .filter(item => item.saleId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    return {\n      ...sale,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleId = randomUUID();\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    const sale: Sale = {\n      ...insertSale,\n      id: saleId,\n      invoiceNumber,\n      fees: insertSale.fees || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.sales.set(saleId, sale);\n\n    // Create sale items and update inventory\n    const saleItemsWithProducts = [];\n    for (const item of items) {\n      const saleItemId = randomUUID();\n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      this.saleItems.set(saleItemId, saleItem);\n      \n      // Update inventory (decrease quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem && inventoryItem.quantity >= item.quantity) {\n        inventoryItem.quantity -= item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      saleItemsWithProducts.push({\n        ...saleItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    return {\n      ...sale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const allSales = await this.getSales();\n    return allSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n\n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsArray = Array.from(this.returns.values());\n    return Promise.all(\n      returnsArray.map(async (returnData) => {\n        const items = Array.from(this.returnItems.values())\n          .filter(item => item.returnId === returnData.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        const originalSale = this.sales.get(returnData.originalSaleId)!;\n        \n        return {\n          ...returnData,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnData = this.returns.get(id);\n    if (!returnData) return undefined;\n\n    const items = Array.from(this.returnItems.values())\n      .filter(item => item.returnId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    const originalSale = this.sales.get(returnData.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnId = randomUUID();\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.returns.set(returnId, returnData);\n\n    // Create return items and update inventory\n    const returnItemsWithProducts = [];\n    for (const item of items) {\n      const returnItemId = randomUUID();\n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      this.returnItems.set(returnItemId, returnItem);\n      \n      // Update inventory (increase quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem) {\n        inventoryItem.quantity += item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      returnItemsWithProducts.push({\n        ...returnItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    const originalSale = this.sales.get(insertReturn.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = {\n      ...insertExpense,\n      id,\n      date: insertExpense.date || new Date(),\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const allExpenses = await this.getExpenses();\n    return allExpenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n\n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      date: insertPurchase.date || new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const allPurchases = await this.getPurchases();\n    return allPurchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n    \n    const todaySalesData = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = todaySalesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    \n    const onlineOrdersCount = todaySalesData.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15653},"attached_assets/storage_1756384459944.ts":{"content":"import { \n  type Product, \n  type InsertProduct, \n  type ProductInventory, \n  type InsertProductInventory,\n  type Sale,\n  type InsertSale,\n  type SaleItem,\n  type InsertSaleItem,\n  type Return,\n  type InsertReturn,\n  type ReturnItem,\n  type InsertReturnItem,\n  type Expense,\n  type InsertExpense,\n  type Purchase,\n  type InsertPurchase,\n  type ProductWithInventory,\n  type SaleWithItems,\n  type ReturnWithItems,\n  COLORS,\n  SIZES\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Products\n  getProducts(): Promise<ProductWithInventory[]>;\n  getProductById(id: string): Promise<ProductWithInventory | undefined>;\n  getProductByModelNumber(modelNumber: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Product Inventory\n  getProductInventory(productId: string): Promise<ProductInventory[]>;\n  updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory>;\n  bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]>;\n  \n  // Sales\n  getSales(): Promise<SaleWithItems[]>;\n  getSaleById(id: string): Promise<SaleWithItems | undefined>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems>;\n  getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]>;\n  \n  // Returns\n  getReturns(): Promise<ReturnWithItems[]>;\n  getReturnById(id: string): Promise<ReturnWithItems | undefined>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems>;\n  \n  // Expenses\n  getExpenses(): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]>;\n  \n  // Purchases\n  getPurchases(): Promise<Purchase[]>;\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]>;\n  \n  // Analytics\n  getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product> = new Map();\n  private inventory: Map<string, ProductInventory> = new Map();\n  private sales: Map<string, Sale> = new Map();\n  private saleItems: Map<string, SaleItem> = new Map();\n  private returns: Map<string, Return> = new Map();\n  private returnItems: Map<string, ReturnItem> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private purchases: Map<string, Purchase> = new Map();\n\n  constructor() {\n    // Initialize with some sample data for testing\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const product1: Product = {\n      id: randomUUID(),\n      modelNumber: \"EVE-001\",\n      companyName: \"شركة الأزياء الراقية\",\n      productType: \"evening-wear\",\n      storePrice: \"890.00\",\n      onlinePrice: \"850.00\",\n      imageUrl: null,\n      specifications: \"فستان سهرة أنيق مصنوع من أجود الأقمشة\",\n      createdAt: new Date(),\n    };\n\n    const product2: Product = {\n      id: randomUUID(),\n      modelNumber: \"HIJ-025\",\n      companyName: \"شركة الحجاب الفاخر\",\n      productType: \"hijab\",\n      storePrice: \"150.00\",\n      onlinePrice: \"140.00\",\n      imageUrl: null,\n      specifications: \"حجاب حرير فاخر بجودة عالية\",\n      createdAt: new Date(),\n    };\n\n    this.products.set(product1.id, product1);\n    this.products.set(product2.id, product2);\n\n    // Sample inventory\n    COLORS.forEach((color) => {\n      SIZES.forEach((size) => {\n        const inventory1: ProductInventory = {\n          id: randomUUID(),\n          productId: product1.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 20) + 1,\n        };\n        const inventory2: ProductInventory = {\n          id: randomUUID(),\n          productId: product2.id,\n          color,\n          size,\n          quantity: Math.floor(Math.random() * 10) + 1,\n        };\n        this.inventory.set(inventory1.id, inventory1);\n        this.inventory.set(inventory2.id, inventory2);\n      });\n    });\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithInventory[]> {\n    const productsArray = Array.from(this.products.values());\n    const productsWithInventory = await Promise.all(\n      productsArray.map(async (product) => {\n        const inventory = await this.getProductInventory(product.id);\n        const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n        let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n        \n        if (totalQuantity === 0) {\n          status = 'out-of-stock';\n        } else if (totalQuantity < 10) {\n          status = 'low-stock';\n        }\n\n        return {\n          ...product,\n          inventory,\n          totalQuantity,\n          status,\n        } as ProductWithInventory;\n      })\n    );\n    \n    return productsWithInventory;\n  }\n\n  async getProductById(id: string): Promise<ProductWithInventory | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n\n    const inventory = await this.getProductInventory(id);\n    const totalQuantity = inventory.reduce((sum, item) => sum + item.quantity, 0);\n    let status: 'in-stock' | 'low-stock' | 'out-of-stock' = 'in-stock';\n    \n    if (totalQuantity === 0) {\n      status = 'out-of-stock';\n    } else if (totalQuantity < 10) {\n      status = 'low-stock';\n    }\n\n    return {\n      ...product,\n      inventory,\n      totalQuantity,\n      status,\n    } as ProductWithInventory;\n  }\n\n  async getProductByModelNumber(modelNumber: string): Promise<Product | undefined> {\n    return Array.from(this.products.values()).find(p => p.modelNumber === modelNumber);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      imageUrl: insertProduct.imageUrl || null,\n      specifications: insertProduct.specifications || null,\n      createdAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updateData: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) return undefined;\n\n    const updatedProduct = { ...existingProduct, ...updateData };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Product Inventory\n  async getProductInventory(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.inventory.values()).filter(item => item.productId === productId);\n  }\n\n  async updateInventory(productId: string, color: string, size: string, quantity: number): Promise<ProductInventory> {\n    const existingItem = Array.from(this.inventory.values()).find(\n      item => item.productId === productId && item.color === color && item.size === size\n    );\n\n    if (existingItem) {\n      existingItem.quantity = quantity;\n      this.inventory.set(existingItem.id, existingItem);\n      return existingItem;\n    } else {\n      const id = randomUUID();\n      const newItem: ProductInventory = {\n        id,\n        productId,\n        color,\n        size,\n        quantity,\n      };\n      this.inventory.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async bulkUpdateInventory(inventoryItems: InsertProductInventory[]): Promise<ProductInventory[]> {\n    const results: ProductInventory[] = [];\n    \n    for (const item of inventoryItems) {\n      const result = await this.updateInventory(item.productId, item.color, item.size, item.quantity || 0);\n      results.push(result);\n    }\n    \n    return results;\n  }\n\n  // Sales\n  async getSales(): Promise<SaleWithItems[]> {\n    const salesArray = Array.from(this.sales.values());\n    return Promise.all(\n      salesArray.map(async (sale) => {\n        const items = Array.from(this.saleItems.values())\n          .filter(item => item.saleId === sale.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        return {\n          ...sale,\n          items,\n        } as SaleWithItems;\n      })\n    );\n  }\n\n  async getSaleById(id: string): Promise<SaleWithItems | undefined> {\n    const sale = this.sales.get(id);\n    if (!sale) return undefined;\n\n    const items = Array.from(this.saleItems.values())\n      .filter(item => item.saleId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    return {\n      ...sale,\n      items,\n    } as SaleWithItems;\n  }\n\n  async createSale(insertSale: InsertSale, items: InsertSaleItem[]): Promise<SaleWithItems> {\n    const saleId = randomUUID();\n    const invoiceNumber = `INV-${Date.now()}`;\n    \n    const sale: Sale = {\n      ...insertSale,\n      id: saleId,\n      invoiceNumber,\n      fees: insertSale.fees || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.sales.set(saleId, sale);\n\n    // Create sale items and update inventory\n    const saleItemsWithProducts = [];\n    for (const item of items) {\n      const saleItemId = randomUUID();\n      const saleItem: SaleItem = {\n        ...item,\n        id: saleItemId,\n        saleId,\n      };\n      \n      this.saleItems.set(saleItemId, saleItem);\n      \n      // Update inventory (decrease quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem && inventoryItem.quantity >= item.quantity) {\n        inventoryItem.quantity -= item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      saleItemsWithProducts.push({\n        ...saleItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    return {\n      ...sale,\n      items: saleItemsWithProducts,\n    } as SaleWithItems;\n  }\n\n  async getSalesByDateRange(startDate: Date, endDate: Date): Promise<SaleWithItems[]> {\n    const allSales = await this.getSales();\n    return allSales.filter(sale => {\n      const saleDate = new Date(sale.createdAt);\n      return saleDate >= startDate && saleDate <= endDate;\n    });\n  }\n\n  // Returns\n  async getReturns(): Promise<ReturnWithItems[]> {\n    const returnsArray = Array.from(this.returns.values());\n    return Promise.all(\n      returnsArray.map(async (returnData) => {\n        const items = Array.from(this.returnItems.values())\n          .filter(item => item.returnId === returnData.id)\n          .map(item => ({\n            ...item,\n            product: this.products.get(item.productId)!,\n          }));\n        \n        const originalSale = this.sales.get(returnData.originalSaleId)!;\n        \n        return {\n          ...returnData,\n          items,\n          originalSale,\n        } as ReturnWithItems;\n      })\n    );\n  }\n\n  async getReturnById(id: string): Promise<ReturnWithItems | undefined> {\n    const returnData = this.returns.get(id);\n    if (!returnData) return undefined;\n\n    const items = Array.from(this.returnItems.values())\n      .filter(item => item.returnId === id)\n      .map(item => ({\n        ...item,\n        product: this.products.get(item.productId)!,\n      }));\n\n    const originalSale = this.sales.get(returnData.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<ReturnWithItems> {\n    const returnId = randomUUID();\n    \n    const returnData: Return = {\n      ...insertReturn,\n      id: returnId,\n      refundAmount: insertReturn.refundAmount || \"0\",\n      createdAt: new Date(),\n    };\n\n    this.returns.set(returnId, returnData);\n\n    // Create return items and update inventory\n    const returnItemsWithProducts = [];\n    for (const item of items) {\n      const returnItemId = randomUUID();\n      const returnItem: ReturnItem = {\n        ...item,\n        id: returnItemId,\n        returnId,\n      };\n      \n      this.returnItems.set(returnItemId, returnItem);\n      \n      // Update inventory (increase quantity)\n      const inventoryItem = Array.from(this.inventory.values()).find(\n        inv => inv.productId === item.productId && inv.color === item.color && inv.size === item.size\n      );\n      \n      if (inventoryItem) {\n        inventoryItem.quantity += item.quantity;\n        this.inventory.set(inventoryItem.id, inventoryItem);\n      }\n\n      returnItemsWithProducts.push({\n        ...returnItem,\n        product: this.products.get(item.productId)!,\n      });\n    }\n\n    const originalSale = this.sales.get(insertReturn.originalSaleId)!;\n\n    return {\n      ...returnData,\n      items: returnItemsWithProducts,\n      originalSale,\n    } as ReturnWithItems;\n  }\n\n  // Expenses\n  async getExpenses(): Promise<Expense[]> {\n    return Array.from(this.expenses.values());\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const expense: Expense = {\n      ...insertExpense,\n      id,\n      date: insertExpense.date || new Date(),\n    };\n    this.expenses.set(id, expense);\n    return expense;\n  }\n\n  async getExpensesByDateRange(startDate: Date, endDate: Date): Promise<Expense[]> {\n    const allExpenses = await this.getExpenses();\n    return allExpenses.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate >= startDate && expenseDate <= endDate;\n    });\n  }\n\n  // Purchases\n  async getPurchases(): Promise<Purchase[]> {\n    return Array.from(this.purchases.values());\n  }\n\n  async createPurchase(insertPurchase: InsertPurchase): Promise<Purchase> {\n    const id = randomUUID();\n    const purchase: Purchase = {\n      ...insertPurchase,\n      id,\n      date: insertPurchase.date || new Date(),\n    };\n    this.purchases.set(id, purchase);\n    return purchase;\n  }\n\n  async getPurchasesByDateRange(startDate: Date, endDate: Date): Promise<Purchase[]> {\n    const allPurchases = await this.getPurchases();\n    return allPurchases.filter(purchase => {\n      const purchaseDate = new Date(purchase.date);\n      return purchaseDate >= startDate && purchaseDate <= endDate;\n    });\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalProducts: number;\n    todaySales: number;\n    outOfStockCount: number;\n    onlineOrdersCount: number;\n  }> {\n    const products = await this.getProducts();\n    const totalProducts = products.length;\n    const outOfStockCount = products.filter(p => p.status === 'out-of-stock').length;\n\n    const today = new Date();\n    const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);\n    \n    const todaySalesData = await this.getSalesByDateRange(todayStart, todayEnd);\n    const todaySales = todaySalesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);\n    \n    const onlineOrdersCount = todaySalesData.filter(sale => sale.channel === 'online').length;\n\n    return {\n      totalProducts,\n      todaySales,\n      outOfStockCount,\n      onlineOrdersCount,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15653},"attached_assets/tailwind.config_1756384141180.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"attached_assets/vite.config_1756384141181.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/vite_1756384408396.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"attached_assets/vite_1756384459944.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263}},"version":1}